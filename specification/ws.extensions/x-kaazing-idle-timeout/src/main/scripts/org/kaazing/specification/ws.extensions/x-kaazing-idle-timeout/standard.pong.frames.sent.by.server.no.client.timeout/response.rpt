#
# Copyright 2007-2015, Kaazing Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

accept "http://localhost:8001/echo"
accepted
connected

read http:method "GET"
read http:version "HTTP/1.1"
read http:header "Host" "localhost:8001"
read http:header "Upgrade" /(?i:websocket)/
read http:header "Connection" /(?i:Upgrade)/
read http:header "Sec-WebSocket-Key" /(?<key>[a-zA-Z0-9+\/=]{24})/
read http:header "Sec-WebSocket-Version" "13"
read http:header "Sec-WebSocket-Extensions" "x-kaazing-idle-timeout"

write http:status "101" "Switching Protocols"
write http:version "HTTP/1.1"
write http:header "Upgrade" "websocket"
write http:header "Connection" "Upgrade"
write http:header "Sec-WebSocket-Accept" ${ws:handshakeHash(key)}
write http:header "Sec-WebSocket-Extensions" "x-kaazing-idle-timeout; timeout=2000"

write notify HANDSHAKE_COMPLETE

################################################################
# Expect random data flowing from client

read [0x82 0x82] ([0..4] :readMask)
read option mask ${readMask}
read [0x11 0x11]
read option mask [0x00 0x00 0x00 0x00]
################################################################
read [0x82 0x82] ([0..4] :readMask)
read option mask ${writeMask}
read [0x11 0x11]
read option mask [0x00 0x00 0x00 0x00]

# Send PONG
write await SEND_TWO
write [0x8a 0x00]
################################################################
read [0x82 0x82] ([0..4] :readMask)
read option mask ${readMask}
read [0x11 0x11]
read option mask [0x00 0x00 0x00 0x00]
################################################################
read [0x82 0x82] ([0..4] :readMask)
read option mask ${writeMask}
read [0x11 0x11]
read option mask [0x00 0x00 0x00 0x00]

# Send PONG
write await SEND_FOUR
write [0x8a 0x00]
################################################################

# Close initiated by client
read [0x88 0x80] [0..4]
write [0x88 0x00]

close
closed
